{"ast":null,"code":"const API_URL = 'http://localhost:8081';\n\nasync function httpGetPlanets() {\n  const response = await fetch(`${API_URL}/planets`);\n  return await response.json(); // TODO: Once API is ready.\n  // Load planets and return as JSON.\n}\n\nasync function httpGetLaunches() {\n  const response = await fetch(`${API_URL}/launches`);\n  const fetchLaunches = await response.json();\n  return fetchLaunches.sort((a, b) => {\n    return a.flightNumber - b.flightNumber;\n  }); // TODO: Once API is ready.\n  // Load launches, sort by flight number, and return as JSON.\n}\n\nasync function httpSubmitLaunch(launch) {\n  await fetch; // TODO: Once API is ready.\n  // Submit given launch data to launch system.\n}\n\nasync function httpAbortLaunch(id) {// TODO: Once API is ready.\n  // Delete launch with given ID.\n}\n\nexport { httpGetPlanets, httpGetLaunches, httpSubmitLaunch, httpAbortLaunch };","map":{"version":3,"sources":["F:/Nam4/Newtech/w9/project_NASA_20110371/client/src/hooks/requests.js"],"names":["API_URL","httpGetPlanets","response","fetch","json","httpGetLaunches","fetchLaunches","sort","a","b","flightNumber","httpSubmitLaunch","launch","httpAbortLaunch","id"],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAhB;;AACA,eAAeC,cAAf,GAAgC;AAC9B,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,UAAZ,CAA5B;AACA,SAAO,MAAME,QAAQ,CAACE,IAAT,EAAb,CAF8B,CAG9B;AACA;AACD;;AAED,eAAeC,eAAf,GAAiC;AAC/B,QAAMH,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,WAAZ,CAA5B;AACA,QAAMM,aAAa,GAAG,MAAMJ,QAAQ,CAACE,IAAT,EAA5B;AACA,SAAOE,aAAa,CAACC,IAAd,CAAmB,CAACC,CAAD,EAAGC,CAAH,KAAO;AAC/B,WAAOD,CAAC,CAACE,YAAF,GAAiBD,CAAC,CAACC,YAA1B;AACD,GAFM,CAAP,CAH+B,CAM/B;AACA;AACD;;AAED,eAAeC,gBAAf,CAAgCC,MAAhC,EAAwC;AACtC,QAAMT,KAAN,CADsC,CAEtC;AACA;AACD;;AAED,eAAeU,eAAf,CAA+BC,EAA/B,EAAmC,CACjC;AACA;AACD;;AAED,SACEb,cADF,EAEEI,eAFF,EAGEM,gBAHF,EAIEE,eAJF","sourcesContent":["const API_URL = 'http://localhost:8081';\nasync function httpGetPlanets() {\n  const response = await fetch(`${API_URL}/planets`)\n  return await response.json()\n  // TODO: Once API is ready.\n  // Load planets and return as JSON.\n}\n\nasync function httpGetLaunches() {\n  const response = await fetch(`${API_URL}/launches`)\n  const fetchLaunches = await response.json()\n  return fetchLaunches.sort((a,b)=>{\n    return a.flightNumber - b.flightNumber;\n  })\n  // TODO: Once API is ready.\n  // Load launches, sort by flight number, and return as JSON.\n}\n\nasync function httpSubmitLaunch(launch) {\n  await fetch\n  // TODO: Once API is ready.\n  // Submit given launch data to launch system.\n}\n\nasync function httpAbortLaunch(id) {\n  // TODO: Once API is ready.\n  // Delete launch with given ID.\n}\n\nexport {\n  httpGetPlanets,\n  httpGetLaunches,\n  httpSubmitLaunch,\n  httpAbortLaunch,\n};"]},"metadata":{},"sourceType":"module"}